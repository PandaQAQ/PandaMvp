plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'kotlin-parcelize'
}

kapt {
    arguments {
        arg("AROUTER_MODULE_NAME", project.getName())
    }
}
android {

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId rootProject.ext.android["applicationId"]
        compileSdkVersion rootProject.ext.android["compileSdkVersion"]
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        versionCode APP_VERSION_CODE.toInteger()
        versionName APP_VERSION_NAME
        testInstrumentationRunner rootProject.ext.android["runner"]
        multiDexEnabled true
        multiDexKeepProguard file('multidex-config.pro')
        ndk {
            abiFilters "armeabi-v7a", "armeabi"
        }
    }

    signingConfigs {
        release {

        }

        debug {

        }
    }

    buildTypes {
        release {
            debuggable inDebug.toBoolean()
//            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        appTest {
            debuggable inDebug.toBoolean()
            signingConfig signingConfigs.debug
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            debuggable inDebug.toBoolean()
            signingConfig signingConfigs.debug
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    buildFeatures{
        viewBinding true
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
            manifest.srcFile 'src/main/AndroidManifest.xml'
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all {
            if (variant.buildType.name == "release") {
                outputFileName = "sds_v${variant.versionName}_prod.apk"
            } else if (variant.buildType.name == "debug") {
                outputFileName = "sds_v${variant.versionName}_dev.apk"
            } else {
                outputFileName = "sds_v${variant.versionName}_${variant.buildType.name}.apk"
            }
        }
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    //noinspection GradleCompatible
    implementation rootProject.ext.dependencies["appcompat"]
    testImplementation rootProject.ext.dependencies["junit"]
    androidTestImplementation rootProject.ext.dependencies["androix-junit"]
    androidTestImplementation rootProject.ext.dependencies["espresso-core"]
    implementation rootProject.ext.dependencies["design"]
    kapt rootProject.ext.dependencies["arouter_compiler"]
    implementation(project(':functionlibs:pay'))

    // 按需加载依赖业务 APP
    if (buildAll.toBoolean()) {
        for (String name : allComponents.split(",")) {
            implementation(project(":$name"))
        }
    } else {
        for (String name : loadComponents.split(",")) {
            if (!name.isEmpty()) {
                implementation(project(":$name"))
            }
        }
    }
}
