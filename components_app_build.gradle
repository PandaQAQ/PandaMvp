boolean isShellApp = project.getName() == shellModuleName
if (runAsApplication.toBoolean() || isShellApp) {
    apply plugin: 'com.android.application'
} else {
    apply plugin: 'com.android.library'
}
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'

kapt {
    arguments {
        arg("AROUTER_MODULE_NAME", project.getName())
    }
}

android {
    compileSdkVersion rootProject.ext.android["compileSdkVersion"]

    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        versionCode rootProject.ext.android["versionCode"]
        versionName rootProject.ext.android["versionName"]
        testInstrumentationRunner rootProject.ext.dependencies["androidJUnitRunner"]
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]
                includeCompileClasspath true
            }
        }
        multiDexEnabled true
        buildConfigField "String", "TOKEN", "\"123\""
    }
    buildTypes {
        debug {
            buildConfigField "boolean", "LOG_DEBUG", "true"
            buildConfigField "boolean", "USE_CANARY", "true"
            buildConfigField "boolean", "RUN_AS_APP", "${runAsApplication}"
            minifyEnabled false
            if (runAsApplication.toBoolean()) {
                consumerProguardFiles 'proguard-rules.pro'
            } else {
                proguardFiles 'proguard-rules.pro'
            }
        }

        release {
            buildConfigField "boolean", "LOG_DEBUG", "false"
            buildConfigField "boolean", "USE_CANARY", "false"
            buildConfigField "boolean", "RUN_AS_APP", "${runAsApplication}"
            minifyEnabled true
            zipAlignEnabled true
            if (runAsApplication.toBoolean()) {
                consumerProguardFiles 'proguard-rules.pro'
            } else {
                proguardFiles 'proguard-rules.pro'
            }
        }
    }

    lintOptions {
        disable 'InvalidPackage'
        disable "ResourceType"
        abortOnError false
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
            if (isShellApp){
                manifest.srcFile 'src/main/AndroidManifest.xml'
            }else {
                if (runAsApplication.toBoolean()) {
                    manifest.srcFile 'src/main/debug/AndroidManifest.xml'
                } else {
                    manifest.srcFile 'src/main/release/AndroidManifest.xml'
                }
            }
        }
    }
}
dependencies {
    implementation(project(':router')) {
        exclude group: 'androidx'
        exclude module: 'appcompat-v7'
        exclude module: 'support-v4'
    }
//    annotationProcessor rootProject.ext.dependencies["arouter-compiler"]
    kapt rootProject.ext.dependencies["arouter_compiler"]
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    api(project(':uires')) {
        exclude group: 'com.android.support'
        exclude module: 'appcompat-v7'
        exclude module: 'support-v4'
    }
}