package com.pandaq.router.database.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.pandaq.router.database.entity.ConfigData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CONFIG_DATA".
*/
public class ConfigDataDao extends AbstractDao<ConfigData, Void> {

    public static final String TABLENAME = "CONFIG_DATA";

    /**
     * Properties of entity ConfigData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Active = new Property(0, boolean.class, "active", false, "ACTIVE");
        public final static Property AppId = new Property(1, int.class, "appId", false, "APP_ID");
        public final static Property ConfigKey = new Property(2, String.class, "configKey", false, "CONFIG_KEY");
        public final static Property ConfigValue = new Property(3, String.class, "configValue", false, "CONFIG_VALUE");
        public final static Property Deleted = new Property(4, int.class, "deleted", false, "DELETED");
        public final static Property Type = new Property(5, String.class, "type", false, "TYPE");
        public final static Property Version = new Property(6, int.class, "version", false, "VERSION");
    }


    public ConfigDataDao(DaoConfig config) {
        super(config);
    }
    
    public ConfigDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CONFIG_DATA\" (" + //
                "\"ACTIVE\" INTEGER NOT NULL ," + // 0: active
                "\"APP_ID\" INTEGER NOT NULL ," + // 1: appId
                "\"CONFIG_KEY\" TEXT," + // 2: configKey
                "\"CONFIG_VALUE\" TEXT," + // 3: configValue
                "\"DELETED\" INTEGER NOT NULL ," + // 4: deleted
                "\"TYPE\" TEXT," + // 5: type
                "\"VERSION\" INTEGER NOT NULL );"); // 6: version
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CONFIG_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ConfigData entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getActive() ? 1L: 0L);
        stmt.bindLong(2, entity.getAppId());
 
        String configKey = entity.getConfigKey();
        if (configKey != null) {
            stmt.bindString(3, configKey);
        }
 
        String configValue = entity.getConfigValue();
        if (configValue != null) {
            stmt.bindString(4, configValue);
        }
        stmt.bindLong(5, entity.getDeleted());
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(6, type);
        }
        stmt.bindLong(7, entity.getVersion());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ConfigData entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getActive() ? 1L: 0L);
        stmt.bindLong(2, entity.getAppId());
 
        String configKey = entity.getConfigKey();
        if (configKey != null) {
            stmt.bindString(3, configKey);
        }
 
        String configValue = entity.getConfigValue();
        if (configValue != null) {
            stmt.bindString(4, configValue);
        }
        stmt.bindLong(5, entity.getDeleted());
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(6, type);
        }
        stmt.bindLong(7, entity.getVersion());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public ConfigData readEntity(Cursor cursor, int offset) {
        ConfigData entity = new ConfigData( //
            cursor.getShort(offset + 0) != 0, // active
            cursor.getInt(offset + 1), // appId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // configKey
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // configValue
            cursor.getInt(offset + 4), // deleted
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // type
            cursor.getInt(offset + 6) // version
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ConfigData entity, int offset) {
        entity.setActive(cursor.getShort(offset + 0) != 0);
        entity.setAppId(cursor.getInt(offset + 1));
        entity.setConfigKey(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setConfigValue(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDeleted(cursor.getInt(offset + 4));
        entity.setType(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setVersion(cursor.getInt(offset + 6));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(ConfigData entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(ConfigData entity) {
        return null;
    }

    @Override
    public boolean hasKey(ConfigData entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
