apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-parcelize'

android {

    compileSdkVersion rootProject.ext.android["compileSdkVersion"]

    defaultConfig {
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        versionCode rootProject.ext.android["versionCode"]
        versionName rootProject.ext.android["versionName"]
    }

    defaultConfig {
        multiDexEnabled true
    }

    buildTypes {
        release {
            minifyEnabled false
            consumerProguardFiles 'proguard-rules.pro'
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildFeatures{
        viewBinding true
    }
}

repositories {
    mavenCentral()
}

/**
 * 依赖规则，module 组件化开发。网路库、事件总线库等以 api 方式提供。
 * 上层 module 不在单独依赖对应的库，统一使用基础 module 中的依赖库，以保证版本一致
 */
dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    api rootProject.ext.dependencies["design"]

    api rootProject.ext.dependencies["multidex"]
    testImplementation rootProject.ext.dependencies["junit"]
    androidTestImplementation rootProject.ext.dependencies["androix-junit"]
    androidTestImplementation rootProject.ext.dependencies["espresso-core"]
    //事件总线
    api rootProject.ext.dependencies["eventbus"]
    //磁盘缓存
    api rootProject.ext.dependencies["disklrucache"]
    //图片框架，如果需要使用，编译依赖即可
    api(rootProject.ext.dependencies["glide"])
    api(rootProject.ext.dependencies["glide-annotation"])
    kapt rootProject.ext.dependencies["annotation"]
    api rootProject.ext.dependencies['rxpanda']
    api rootProject.ext.dependencies['x5browser']
//    api project(':rxpanda')
    //jetpack
    // ViewModel
    api rootProject.ext.dependencies['viewmodel']
    // LiveData
    api rootProject.ext.dependencies['livedata']
    // Lifecycles only (without ViewModel or LiveData)
    api rootProject.ext.dependencies['lifecycle-runtime']
    // Saved state module for ViewModel
    api rootProject.ext.dependencies['viewmodel-savedstate']
    // alternately - if using Java8, use the following instead of lifecycle-compiler
    api rootProject.ext.dependencies['lifecycle-common-java8']
    // optional - ReactiveStreams support for LiveData
    api rootProject.ext.dependencies['lifecycle-reactivestreams']
    // optional - Test helpers for LiveData
    testImplementation rootProject.ext.dependencies['core-testing']
}
