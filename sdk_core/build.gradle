plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'maven-publish'
    id 'kotlin-parcelize'
}

android {

    compileSdkVersion rootProject.ext.android["compileSdkVersion"]

    defaultConfig {
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        multiDexEnabled true
    }

    buildTypes {
        release {
            debuggable inDebug.toBoolean()
            buildConfigField("boolean", "IN_DEBUG", inDebug)
            buildConfigField("String", "TENANT_ID", TENANT_ID)
            buildConfigField("String", "MQTT_INSTANCE_ID", MQTT_RELEASE_ID)
            buildConfigField("String", "API", BASE_URL_RELEASE)
            buildConfigField("String", "ENV", "\"RELEASE\"")
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        appTest {
            debuggable inDebug.toBoolean()
            buildConfigField("boolean", "IN_DEBUG", inDebug)
            buildConfigField("String", "TENANT_ID", TENANT_ID)
            buildConfigField("String", "MQTT_INSTANCE_ID", MQTT_TEST_ID)
            buildConfigField("String", "API", BASE_URL_TEST)
            buildConfigField("String", "ENV", "\"TEST\"")
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            debuggable inDebug.toBoolean()
            buildConfigField("boolean", "IN_DEBUG", inDebug)
            buildConfigField("String", "TENANT_ID", TENANT_ID)
            buildConfigField("String", "MQTT_INSTANCE_ID", MQTT_DEV_ID)
            buildConfigField("String", "API", BASE_URL_DEV)
            buildConfigField("String", "ENV", "\"DEBUG\"")
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildFeatures {
        viewBinding true
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

publishing {
    publications {
        maven(MavenPublication) {
            // 组名称
            groupId = 'com.scaaa'
            // 模块名称
            artifactId = 'panda-core'
            // 版本号
            version = SDK_CORE_VERSION

            afterEvaluate {
                artifact bundleReleaseAar
            }
            artifact sourcesJar

            pom.withXml {
                //在pom.xml添加依赖关系
                def dependenciesNode = asNode().appendNode('dependencies')
                //拿到所有编译时的依赖
                def dependenciesList = []
                dependenciesList.addAll(configurations.implementation.allDependencies)
                dependenciesList.addAll(configurations.api.allDependencies)
                dependenciesList.each {
                    if (null != it.group) {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                        dependencyNode.appendNode('scope', 'compile')
                    }
                }

            }
        }
    }
    repositories {
        maven {
            // 仓库路径
            url = uri('/Users/pandaq/Desktop/Maven')
        }
    }
}

/**
 * 依赖规则，module 组件化开发。网路库、事件总线库等以 api 方式提供。
 * 上层 module 不在单独依赖对应的库，统一使用基础 module 中的依赖库，以保证版本一致
 */
dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    api fileTree(include: ['*.jar'], dir: 'libs')
    api rootProject.ext.dependencies["design"]
    api rootProject.ext.dependencies["appcompat"]
    api rootProject.ext.dependencies["multidex"]
    api files('libs/BaiduLBS_Android.jar')
    testImplementation rootProject.ext.dependencies["junit"]
    androidTestImplementation rootProject.ext.dependencies["androix-junit"]
    androidTestImplementation rootProject.ext.dependencies["espresso-core"]
    //事件总线
    api rootProject.ext.dependencies["eventbus"]
    //磁盘缓存
    api rootProject.ext.dependencies["disklrucache"]
    //图片框架，如果需要使用，编译依赖即可
    api(rootProject.ext.dependencies["glide"])
    api(rootProject.ext.dependencies["glide-annotation"])
    kapt rootProject.ext.dependencies["annotation"]
    api rootProject.ext.dependencies['rxpanda']
    api rootProject.ext.dependencies['x5browser']
    //jetpack
    // ViewModel
    api rootProject.ext.dependencies['viewmodel']
    // LiveData
    api rootProject.ext.dependencies['livedata']
    // Lifecycles only (without ViewModel or LiveData)
    api rootProject.ext.dependencies['lifecycle-runtime']
    // Saved state module for ViewModel
    api rootProject.ext.dependencies['viewmodel-savedstate']
    // alternately - if using Java8, use the following instead of lifecycle-compiler
    api rootProject.ext.dependencies['lifecycle-common-java8']
    // optional - ReactiveStreams support for LiveData
    api rootProject.ext.dependencies['lifecycle-reactivestreams']
    // optional - Test helpers for LiveData
    testImplementation rootProject.ext.dependencies['core-testing']

    // mqtt 服务
//    api 'org.eclipse.paho:org.eclipse.paho.client.mqttv3:1.2.0'
//    api 'org.eclipse.paho:org.eclipse.paho.android.service:1.1.1'

    //bugly
    api 'com.tencent.bugly:crashreport:latest.release'
    api 'com.tencent.bugly:nativecrashreport:latest.release'

    //阿里云 SLS 日志服务
    api 'com.aliyun.openservices:aliyun-log-android-sdk:2.6.0'
}
